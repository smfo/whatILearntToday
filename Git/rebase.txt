
Rebasing moves a sequence if commits to a new base commits

gir rebase <base>

Rebasing changes the base of a the commit sequence from one commit to 
another, making it  appear that the sequence was created from a different 
commit. Even though the sequence looks the same, it consists of entierly 
new commits.

Used to maintain linear project history, this gives a cleaner merge back
into the master branch

NB! Never rebase public history. Because the commits are replaced with
new ones, it will look like a part of the project history vanished


git rebase -i /-interactive <base/commit name>
git rebase -i HEAD~<number>         //rebase this many commits

Gives the option to alter individual commits in the process of rebasing.
Allows for cleaning history by removing, splitting and altering existing
series of commits. The commands written, in the new window that opens, 
determine how the commits will be transferred to the new base.


Example of interactive commands
pick 2231360 some old commit
pick ee2adc2 Adds new feature


# Rebase 2cf755d..ee2adc2 onto 2cf755d (9 commands)
#
# Commands:
# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like "squash", but discard this commit's log message
# x, exec = run command (the rest of the line) using shell
# d, drop = remove commit